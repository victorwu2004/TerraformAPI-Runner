The error `Credentials could not be loaded, please check your action inputs: Could not load credentials from any providers` in the context of your GitHub Actions workflow using OIDC to authenticate with AWS typically indicates that the AWS credentials configuration step (using `aws-actions/configure-aws-credentials`) failed to obtain valid credentials. This can happen due to issues with the OIDC setup, IAM role configuration, or GitHub Actions workflow. Below, I’ll explain the common causes of this error and how to troubleshoot and resolve them, tailored to the Terraform and GitHub Actions setup you provided.

---

### Common Causes and Solutions

1. **Incorrect IAM Role ARN in GitHub Secrets**
   - **Issue**: The `AWS_ROLE_ARN` secret in your GitHub repository might be incorrect, missing, or mistyped.
   - **Solution**:
     - Verify the `role_arn` output from your Terraform configuration (`main.tf`) after applying it.
     - Ensure the ARN is correctly stored in your GitHub repository secrets:
       - Go to your repository → Settings → Secrets and variables → Actions → Secrets.
       - Check that the `AWS_ROLE_ARN` secret matches the output from `terraform output role_arn`.
     - If the secret is missing or incorrect, update it with the correct ARN.

2. **IAM Role Trust Policy Misconfiguration**
   - **Issue**: The IAM role’s trust policy might not correctly allow the GitHub OIDC provider to assume the role. This could be due to:
     - Incorrect `sub` claim in the condition (e.g., wrong repository or branch).
     - Mismatched `aud` claim (e.g., not set to `sts.amazonaws.com`).
   - **Solution**:
     - Check the trust policy in your `aws_iam_role.github_actions_role` resource:
       ```hcl
       Condition = {
         StringEquals = {
           "token.actions.githubusercontent.com:aud" = "sts.amazonaws.com",
           "token.actions.githubusercontent.com:sub" = "repo:your-org/your-repo:ref:refs/heads/main"
         }
       }
       ```
     - Ensure `your-org/your-repo` matches your GitHub repository exactly (e.g., `my-org/my-repo`).
     - Verify the branch (`refs/heads/main`) matches the branch triggering the workflow.
     - If you’re using a different environment or pull request, adjust the `sub` claim accordingly (e.g., `repo:your-org/your-repo:environment:prod` or `repo:your-org/your-repo:pull_request`).
     - Re-apply the Terraform configuration if changes are made:
       ```bash
       terraform apply
       ```

3. **Missing or Incorrect OIDC Provider Configuration**
   - **Issue**: The OIDC identity provider might not be set up correctly in AWS, or the thumbprint might be outdated.
   - **Solution**:
     - Verify the OIDC provider configuration in `aws_iam_openid_connect_provider.github`:
       ```hcl
       url = "https://token.actions.githubusercontent.com"
       client_id_list = ["sts.amazonaws.com"]
       thumbprint_list = ["6938fd4d98bab03faadb97b34396831e3780aea1"]
       ```
     - Ensure the `url` is correct for GitHub (`https://token.actions.githubusercontent.com`).
     - Confirm the thumbprint. As of my last update, `6938fd4d98bab03faadb97b34396831e3780aea1` is valid for GitHub, but you can verify it by following GitHub’s documentation or generating it manually:
       - Use OpenSSL to fetch the thumbprint:
         ```bash
         openssl s_client -connect token.actions.githubusercontent.com:443 < /dev/null 2>/dev/null | openssl x509 -fingerprint -noout | cut -d'=' -f2 | tr -d ':' | tr '[:upper:]' '[:lower:]'
         ```
     - If the provider doesn’t exist or is misconfigured, re-apply the Terraform configuration.

4. **GitHub Actions Permissions Misconfiguration**
   - **Issue**: The GitHub Actions workflow might lack the necessary permissions to request an OIDC token.
   - **Solution**:
     - Ensure the workflow includes the correct permissions for OIDC:
       ```yaml
       permissions:
         id-token: write
         contents: read
       ```
     - This is already included in the provided workflow, but double-check that it’s present and not overridden elsewhere.
     - If you’re using a GitHub environment, ensure the environment allows OIDC token access (configured in repository settings).

5. **AWS Region Mismatch**
   - **Issue**: The AWS region specified in the GitHub Actions workflow (`aws-region: us-east-1`) might not match the region where the IAM role or OIDC provider is configured.
   - **Solution**:
     - Ensure the region in the `aws-actions/configure-aws-credentials` step matches the region in your Terraform provider:
       ```yaml
       with:
         role-arn: ${{ secrets.AWS_ROLE_ARN }}
         aws-region: us-east-1
       ```
       ```hcl
       provider "aws" {
         region = "us-east-1"
       }
       ```
     - If you’re using a different region, update both the workflow and Terraform configuration to match.

6. **IAM Role Not Yet Propagated**
   - **Issue**: IAM roles and policies can take a few seconds to propagate in AWS, causing temporary credential failures.
   - **Solution**:
     - Wait a minute or two after applying the Terraform configuration, then re-run the GitHub Actions workflow.
     - Check the IAM role in the AWS Console to confirm it exists and has the correct trust policy and permissions.

7. **GitHub Actions Workflow Version Issue**
   - **Issue**: The `aws-actions/configure-aws-credentials` action version might be outdated or incompatible.
   - **Solution**:
     - Ensure you’re using the latest version of the action. The provided workflow uses `v4`:
       ```yaml
       uses: aws-actions/configure-aws-credentials@v4
       ```
     - Check the action’s GitHub repository for any known issues or updates.

8. **Missing or Invalid AWS Permissions**
   - **Issue**: The IAM role might lack permissions to assume itself or perform the `sts:AssumeRoleWithWebIdentity` action.
   - **Solution**:
     - Verify the IAM role policy includes necessary permissions. The provided `aws_iam_role_policy.github_actions_ec2_policy` includes:
       ```hcl
       Action = [
         "ec2:RunInstances",
         "ec2:DescribeInstances",
         "ec2:TerminateInstances",
         "ec2:CreateTags"
       ]
       Resource = "*"
       ```
       And:
       ```hcl
       Action = "iam:PassRole"
       Resource = aws_iam_role.github_actions_role.arn
       ```
     - If the workflow performs other actions (e.g., accessing S3), ensure the policy includes those permissions.
     - If the error persists, add `sts:AssumeRoleWithWebIdentity` explicitly to the role’s permissions (though this is typically not needed).

9. **GitHub Actions Token Scope Issue**
   - **Issue**: The OIDC token might not have the correct scope or claims, especially if using a custom GitHub App or enterprise settings.
   - **Solution**:
     - Ensure the workflow is running in a context that generates the correct OIDC token (e.g., a push to `main`).
     - If using a GitHub App, verify its configuration allows OIDC token generation.

---

### Troubleshooting Steps

1. **Check GitHub Actions Logs**:
   - Go to your repository → Actions → Select the failed workflow run.
   - Review the logs for the `Configure AWS Credentials` step to identify specific errors.
   - Look for details like “InvalidIdentityToken” or “AccessDenied”.

2. **Test OIDC Authentication Manually**:
   - Use the AWS CLI to simulate the OIDC token exchange:
     ```bash
     aws sts assume-role-with-web-identity \
       --role-arn <your-role-arn> \
       --role-session-name test-session \
       --web-identity-token <oidc-token>
     ```
     - Obtain an OIDC token from GitHub (this requires manual setup or a script to mimic GitHub Actions).
     - If this fails, it confirms an issue with the IAM role or OIDC provider.

3. **Verify IAM Role and OIDC Provider in AWS Console**:
   - Go to IAM → Identity providers → Check that `token.actions.githubusercontent.com` exists.
   - Go to IAM → Roles → Select `GitHubActionsEC2Role` → Verify the trust policy and attached policies.

4. **Re-Apply Terraform**:
   - Run `terraform apply` again to ensure all resources are created correctly.
   - Check the output for the `role_arn` and update the GitHub secret if needed.

5. **Enable Debug Logging**:
   - Add debug logging to the GitHub Actions workflow to get more details:
     ```yaml
     env:
       AWS_SDK_LOG_LEVEL: debug
     ```
   - Re-run the workflow and check the logs for additional error information.

---

### Example Fixes Applied to Your Code

If the issue is likely due to a misconfigured repository name or permissions, here’s an updated snippet of the critical parts of `main.tf` with stricter checks:

```hcl
# Ensure the repository name is correct
resource "aws_iam_role" "github_actions_role" {
  name = "GitHubActionsEC2Role"

  assume_role_policy = jsonencode({
    Version = "2012-10-17",
    Statement = [
      {
        Effect = "Allow",
        Principal = {
          Federated = aws_iam_openid_connect_provider.github.arn
        },
        Action = "sts:AssumeRoleWithWebIdentity",
        Condition = {
          StringEquals = {
            "token.actions.githubusercontent.com:aud" = "sts.amazonaws.com",
            "token.actions.githubusercontent.com:sub" = "repo:<your-org>/<your-repo>:ref:refs/heads/main" # Double-check this
          }
        }
      }
    ]
  })
}
```

- Replace `<your-org>/<your-repo>` with your actual GitHub organization and repository (e.g., `my-org/my-repo`).
- If the workflow runs on a different branch or event (e.g., pull request), update the `sub` condition:
  - For pull requests: `"repo:<your-org>/<your-repo>:pull_request"`
  - For a specific environment: `"repo:<your-org>/<your-repo>:environment:<env-name>"`

---

### Additional Notes

- **Terraform State**: If you’re running Terraform locally to set up the OIDC provider and IAM role, ensure the state is accessible to GitHub Actions or re-run the initial setup in the workflow.
- **Region Consistency**: Ensure all resources (EC2, IAM, etc.) are in the same region (`us-east-1` in the example).
- **GitHub Actions Version**: If the issue persists, try pinning to a specific commit of `aws-actions/configure-aws-credentials@v4` to avoid potential breaking changes:
  ```yaml
  uses: aws-actions/configure-aws-credentials@<commit-sha>
  ```

If you’re still encountering the error after trying these steps, please share:
- The exact repository name and branch you’re using.
- Any additional error messages from the GitHub Actions logs.
- Whether you’re using a custom GitHub App or enterprise settings.
I can then refine the solution further or search for real-time information if needed!